//`timescale 1ns / 1ps
// Using behavioral modeling method
module UP_Down_counter_4bit(
   input clock, clear, up_down,
   output reg [3:0] q
   );
   always @(posedge clock or posedge clear) begin
       if(clear) 
           q <= 4'b0000;
       else if(up_down)
          q <= q + 1;// Count up
       else
          q <= q - 1; // Count down
   end
endmodule

--------------------------------------------------------------------------------------------------------------------------------------------------------------------


// 2nd method
module UP_Down_counter_4bit(
    input clock, clear, up_down,
    output wire q3, q2, q1, q0
    );

    // JK Flip-Flops implementation
    JK_ff j1(.J(1), .K(1), .clock(clock), .clear(clear), .q(q0)); // LSB
    JK_ff j2(.J(1), .K(1), .clock(up_down ? q0 : ~q0), .clear(clear), .q(q1));
    JK_ff j3(.J(1), .K(1), .clock(up_down ? q1 : ~q1), .clear(clear), .q(q2));
    JK_ff j4(.J(1), .K(1), .clock(up_down ? q2 : ~q2), .clear(clear), .q(q3)); // MSB

endmodule

// JK Flip-Flop Module
module JK_ff(
    input J, K, clock, clear,
    output reg q
    );
    always @(posedge clock or posedge clear) begin
        if(clear) begin
            q <= 0;
        end
        else begin 
            case({J, K})
                2'b00: q <= q;    // No change
                2'b01: q <= 0;    // Reset
                2'b10: q <= 1;    // Set
                2'b11: q <= ~q;   // Toggle
            endcase
        end
    end
endmodule

