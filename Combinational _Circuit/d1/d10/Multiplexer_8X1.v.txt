`timescale 1ns / 1ps
// using gate level modeling
module Multiplexer_8X1(I0, I1, I2, I3, I4, I5, I6, I7, S0, S1, S2, Cout);
input I0, I1, I2, I3, I4, I5, I6, I7, S0, S1, S2;
output Cout;
wire a, b, c, d, e, f, g, h, i, j, k;
// not gate 
not n1(a, S2);
not n2(b, S1);
not n3(c, S0);
// and gate 
and d1(d, a, b, c);
and d2(e, a, b, S0);
and d3(f, a, S1, c);
and d4(g, a, S1, S0);
and d5(h, S2, b, c);
and d6(i, S2, b, S0);
and d7(j, S2, S1, c);
and d8(k, S2, S1, S0);
// or gate
or o1(Cout, d, e, f, g, h, i, j, k);
endmodule

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
`timescale 1ns / 1ps
// using data flow modeling 
module Multiplexer_8X1(I0, I1, I2, I3, I4, I5, I6, I7, S0, S1, S2, Cout);
input I0, I1, I2, I3, I4, I5, I6, I7, S0, S1, S2;
output Cout;
assign Cout = (~S2 & ~S1 & ~S0 & I0) |
               (~S2 & ~S1 & S0 & I1) |
               (~S2 & S1 & ~S0 & I2) |
               (~S2 & S1 & S0 & I3) |
               (S2 & ~S1 & ~S0 & I4) |
               (S2 & ~S1 & S0 & I5) |
               (S2 & S1 & ~S0 & I6) |
               (S2 & S1 & S0 & I7);

endmodule
