`timescale 1ns / 1ps

module BinarytoBCD_Converter_tb();
        reg P, Q, R, S;
        wire A, B, C, D, E;
        
        BinarytoBCD_Converter dut(.P(P), .Q(Q), .R(R), .S(S),
                                  .A(A), .B(B), .C(C), .D(D), .E(E));
            initial begin
                // test cases
                P = 0; Q = 0; R = 0; S = 0;
                #10 // delay 10 ns
                P = 0; Q = 0; R = 0; S = 1;
                #10 // delay 10 ns
                P = 0; Q = 0; R = 1; S = 0;
                #10 // delay 10 ns
                P = 0; Q = 0; R = 1; S = 1;
                #10 // delay 10 ns
                P = 0; Q = 1; R = 0; S = 0;
                #10 // delay 10 ns
                P = 0; Q = 1; R = 0; S = 1;
                #10 // delay 10 ns
                P = 0; Q = 1; R = 1; S = 0;
                #10 // delay 10 ns
                P = 0; Q = 1; R = 1; S = 1;
                #10 // delay 10 ns
                P = 1; Q = 0; R = 0; S = 0;
                #10 // delay 10 ns
                P = 1; Q = 0; R = 0; S = 1;
                #10 // delay 10 ns
                P = 1; Q = 0; R = 1; S = 0;
                #10 // delay 10 ns
                P = 1; Q = 0; R = 1; S = 1;
                #10 // delay 10 ns
                P = 1; Q = 1; R = 0; S = 0;
                #10 // delay 10 ns
                P = 1; Q = 1; R = 0; S = 1;
                #10 // delay 10 ns
                P = 1; Q = 1; R = 1; S = 0;
                #10 // delay 10 ns
                P = 1; Q = 1; R = 1; S = 1;
                #10 // delay 10 ns
                $finish;
                end
                
endmodule
